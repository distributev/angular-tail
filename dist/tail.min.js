var config={service_url:"http://localhost:3001",socketio_url:"http://localhost:2000"};angular.module("myApp",[]).controller("appController",["$scope","SocketService",function(t,n){t.tail={watch:{persistent:!0,recursive:!1,encoding:"UTF8"},fromBeginning:!1,follow:!0},t.$watch("[tail.watch.persistent,tail.watch.recursive,tail.watch.encoding]",function(n){void 0!==n&&(t.watchOptions=t.tail.watch)})}]),angular.module("myApp").factory("SocketService",["$rootScope",function(t){var n=null,e=[],o=null,i={connect:function(i,r){n||(n=io.connect(config.socketio_url),n.on("connect",function(i){n.on("new lines",function(n){o=n.data,e.push(n.data),t.$apply()})}))},getSocket:function(){return n},getLines:function(){return e},getOneLine:function(){return o}};return i}]),angular.module("myApp").factory("TailService",["$http",function(t){var n=config.service_url+"/tail";return{tail:function(e){var o=n;return t({method:"POST",url:o,data:e,headers:{"Content-type":"application/json"}})},untail:function(e){var o=n;return t({method:"DELETE",url:o})},writeFile:function(e){var o=n+"/write";return t({method:"POST",url:o,data:e,headers:{"Content-type":"application/json"}})}}}]),angular.module("myApp").directive("tail",function(){return{restrict:"E",replace:!0,templateUrl:"js/directive/views/tail.html",scope:{filePath:"=",lineSeparator:"=",fromBeginning:"=",watchOptions:"=",follow:"=?"},controller:["$scope","SocketService","TailService",function(t,n,e){t.lineSeparator=t.lineSeparator?t.lineSeparator:"/[\r]{0,1}\n/",t.fromBeginning=void 0===t.fromBeginning?!1:t.fromBeginning,t.watchOptions=void 0===t.watchOptions?{}:t.watchOptions,t.follow=void 0===t.follow?!0:t.follow,t.SocketService=n,n.connect(),t.watch=function(){e.tail({option:{lineSeparator:t.lineSeparator,fromBeginning:t.fromBeginning,watchOptions:t.watchOptions,follow:t.follow},filePath:t.filePath})},t.unwatch=function(){e.untail().then(function(t){})},t.writeFile=function(){e.writeFile({filePath:t.filePath})}}]}});
//# sourceMappingURL=data:application/json;base64,
